#!/usr/bin/env python3
"""
Prepare a YOLO-formatted dataset by splitting a single folder of images/labels
into train and val subsets and generating data.yaml.

Example usage:
    python3 prepare_yolo_dataset.py \
        --dataset_root yolo_boundingbox_pothole_640 \
        --out_root prepared_dataset_detection \
        --val_ratio 0.15 \
        --seed 42
"""
from pathlib import Path
import argparse
import random
import shutil
from typing import List, Tuple

# ----------- helpers (reuse from your training script) -----------
def list_images(images_dir: Path) -> List[Path]:
    exts = {".jpg", ".jpeg", ".png", ".bmp", ".tif", ".tiff"}
    files = [p for p in images_dir.iterdir() if p.is_file() and p.suffix.lower() in exts]
    files.sort()
    return files

def train_val_split(items: List[Path], val_ratio: float, seed: int) -> Tuple[List[Path], List[Path]]:
    rnd = random.Random(seed)
    items = items.copy()
    rnd.shuffle(items)
    n_val = max(1, int(round(len(items) * val_ratio))) if len(items) > 1 else 1
    val = items[:n_val]
    train = items[n_val:]
    if not train:  # ensure at least one train item
        train, val = val, train
    return train, val

def mirror_dataset(train_imgs: List[Path], val_imgs: List[Path], labels_dir: Path, out_root: Path) -> None:
    """
    Copies (not symlinks) images and label txts into YOLO-style folders:
      out_root/images/train, out_root/images/val,
      out_root/labels/train, out_root/labels/val.
    Creates empty .txt files if a label is missing.
    """
    sub = {
        "train_img": out_root / "images" / "train",
        "val_img": out_root / "images" / "val",
        "train_lbl": out_root / "labels" / "train",
        "val_lbl": out_root / "labels" / "val",
    }
    for p in sub.values():
        p.mkdir(parents=True, exist_ok=True)

    def copy_pair(img_path: Path, dst_img_dir: Path, dst_lbl_dir: Path):
        shutil.copy2(img_path, dst_img_dir / img_path.name)
        lbl = labels_dir / f"{img_path.stem}.txt"
        if lbl.exists():
            shutil.copy2(lbl, dst_lbl_dir / lbl.name)
        else:
            (dst_lbl_dir / f"{img_path.stem}.txt").write_text("")

    for img in train_imgs:
        copy_pair(img, sub["train_img"], sub["train_lbl"])
    for img in val_imgs:
        copy_pair(img, sub["val_img"], sub["val_lbl"])

def write_data_yaml(out_root: Path, names: list[str]) -> Path:
    """
    Writes data.yaml for YOLO at out_root/data.yaml with train/val relative paths.
    Returns the path to the YAML file.
    """
    data_yaml = out_root / "data.yaml"
    content = (
        f"# Auto-generated by prepare_yolo_dataset.py\n"
        f"path: {out_root}\n"
        f"train: images/train\n"
        f"val: images/val\n"
        f"names: {names}\n"
    )
    data_yaml.write_text(content)
    return data_yaml

# ----------- main -----------
def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--dataset_root", type=Path, required=True,
                        help="Folder containing images/ and labels/ (unsplit)")
    parser.add_argument("--out_root", type=Path, required=True,
                        help="Output root where prepared dataset will be written")
    parser.add_argument("--val_ratio", type=float, default=0.15,
                        help="Fraction of data to reserve for validation")
    parser.add_argument("--seed", type=int, default=42,
                        help="Random seed for splitting")
    parser.add_argument("--class_name", type=str, default="pothole",
                        help="Name of the class for YOLO's names list")

    args = parser.parse_args()

    images_dir = args.dataset_root / "images"
    labels_dir = args.dataset_root / "labels"
    if not images_dir.is_dir() or not labels_dir.is_dir():
        raise FileNotFoundError("dataset_root must contain images/ and labels/ directories")

    all_imgs = list_images(images_dir)
    if len(all_imgs) < 3:
        print(f"Warning: only {len(all_imgs)} images found.")
    train_imgs, val_imgs = train_val_split(all_imgs, args.val_ratio, args.seed)

    # Clean output
    if args.out_root.exists():
        shutil.rmtree(args.out_root)
    args.out_root.mkdir(parents=True)

    mirror_dataset(train_imgs, val_imgs, labels_dir, args.out_root)
    data_yaml = write_data_yaml(args.out_root, names=[args.class_name])
    print(f"Dataset prepared at {args.out_root}")
    print(f"Train images: {len(train_imgs)}, Val images: {len(val_imgs)}")
    print(f"data.yaml written to {data_yaml}")

if __name__ == "__main__":
    main()